name: Build and Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    environment: dev

    steps:
    # - name: Checkout code
    #   uses: actions/checkout@v3

    # - name: Set up Python
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.12'

    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install -r requirements.txt

    # - name: PyInstaller Action
    #   uses: Martin005/pyinstaller-action@v1.2.0
    #   with:
    #     python_ver: '3.12'
    #     spec: api/3S_PC_automation.py
    #     requirements: requirements.txt
    #     exe_path: dist/
    #     options: --onefile, --name "3S PC automation", --noconsole,

    # - name: Create Draft Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: "draft-v0.1.0"
    #     release_name: "Draft Release v0.1.0"
    #     body: |
    #       Draft release containing the latest build.
    #     draft: true
    #     prerelease: false

    # - name: Log Tree
    #   run: |
    #     tree /F
    #   shell: pwsh

    # - name: Upload Release Asset
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: "dist/3S PC automation.exe"
    #     asset_name: "3S PC automation.exe"
    #     asset_content_type: application/octet-stream
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get draft release ID
        uses: actions/github-script@v6
        id: get-release
        with:
          script: |
            const releaseTitle = 'Draft Release v0.1.0';

            // List all releases and find the draft release by title
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const draftRelease = releases.find(release => release.draft && release.name === releaseTitle);

            if (draftRelease) {
              console.log(`Draft Release ID: ${draftRelease.id}`);
              return draftRelease.id;
            } else {
              console.log('No draft release found with the specified title.');
              return null;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get asset URL from draft release
        uses: actions/github-script@v6
        if: steps.get-release.outputs.result != 'null'
        with:
          script: |
            const releaseId = '${{ steps.get-release.outputs.result }}'; // Get the draft release ID from the previous step
            const assetName = '3S.PC.automation.exe';

            // Fetch the release details using the ID
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
            });

            // Find the asset URL
            const asset = release.assets.find(a => a.name === assetName);
            if (asset) {
              console.log(`Asset URL: ${asset.browser_download_url}`);
            } else {
              console.log('Asset not found.');
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Update Vercel Environment Variable
        if: steps.get-asset-url.outputs.result != 'null'
        run: |
          $projectId = "pcaut"
          $envId = "LINK_TO_ASSET"
          $url = "https://api.vercel.com/v9/projects/$projectId/env/$envId"
          $headers = @{
            "Authorization" = "Bearer $env:VERCEL_CLIENT"
            "Content-Type" = "application/json"
          }
          $body = @{
            "value" = "${{ steps.get-asset-url.outputs.result }}"
          } | ConvertTo-Json
          Invoke-RestMethod -Uri $url -Method Patch -Headers $headers -Body $body
        env:
          VERCEL_CLIENT: ${{ secrets.VERCEL_CLIENT }}