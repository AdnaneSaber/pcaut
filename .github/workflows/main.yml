name: Build and Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/pyinstaller-requirements.txt

      - name: PyInstaller Action
        uses: Martin005/pyinstaller-action@v1.2.0
        with:
          python_ver: '3.12'
          spec: api/3S_PC_automation.py
          requirements: api/pyinstaller-requirements.txt
          exe_path: dist/
          options: --onefile, --name "3S_PC_automation", --noconsole

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "test_release"
          release_name: "Release v0.1.0"
          body: |
            Release containing the latest build.
          prerelease: false

      - name: Upload Release Asset
        id: upload_asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "dist/3S_PC_automation.exe"
          asset_name: "3S_PC_automation.exe"
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-vercel:
    runs-on: windows-latest
    needs: build
    environment: dev
    steps:
      - name: Get Asset ID
        id: get_asset_id
        shell: pwsh
        run: |
          $headers = @{
            "Authorization" = "Bearer $env:GITHUB_TOKEN"
            "Accept" = "application/vnd.github.v3+json"
          }
          $releaseId = (Invoke-RestMethod -Uri "https://api.github.com/repos/$env:GITHUB_REPOSITORY/releases" -Headers $headers | Where-Object { $_.tag_name -eq "test_release" }).id
          $assets = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:GITHUB_REPOSITORY/releases/$releaseId/assets" -Headers $headers
          $asset = $assets | Where-Object { $_.name -eq "3S_PC_automation.exe" }
          $assetId = $asset.id
          Write-Output "Asset ID: $assetId"
          echo "::set-output name=asset_id::$assetId"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Asset URL from Release
        id: get-asset-url
        if: steps.get_asset_id.outputs.result != 'null'
        shell: pwsh
        run: |
          $assetId = ${{ steps.get_asset_id.outputs.asset_id }}
          $url = "https://api.github.com/repos/$env:GITHUB_REPOSITORY/releases/assets/$assetId"
          $headers = @{
            "Authorization" = "Bearer $env:GITHUB_TOKEN"
            "Accept" = "application/vnd.github.v3+json"
          }
          $response = Invoke-RestMethod -Uri $url -Method Get -Headers $headers
          $browserUrl = $response.browser_download_url
          Write-Output "Browser URL: $browserUrl"
          echo "::set-output name=browser_url::$browserUrl"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Vercel Environment Variable
        if: steps.get-asset-url.outputs.result != 'null'
        run: |
          $url = "https://api.vercel.com/v9/projects/pcaut/env/uw5nMEmrXbDTeNQB"
          $headers = @{
            "Authorization" = "Bearer $env:VERCEL_CLIENT"
            "Content-Type" = "application/json"
          }
          $body = @{
            "value" = "${{ steps.get-asset-url.outputs.browser_url }}"
          } | ConvertTo-Json
          Invoke-RestMethod -Uri $url -Method Patch -Headers $headers -Body $body
        env:
          VERCEL_CLIENT: ${{ secrets.VERCEL_CLIENT }}
