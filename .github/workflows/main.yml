name: Build and Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/pyinstaller-requirements.txt

      - name: PyInstaller Action
        uses: Martin005/pyinstaller-action@v1.2.0
        with:
          python_ver: '3.12'
          spec: api/3S_PC_automation.py
          requirements: api/pyinstaller-requirements.txt
          exe_path: dist/
          options: --onefile, --name "3S_PC_automation", --noconsole

      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "test_release"
          release_name: "Draft Release v0.1.0"
          body: |
            Draft release containing the latest build.
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload_asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "dist/3S_PC_automation.exe"
          asset_name: "3S_PC_automation.exe"
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-vercel:
    runs-on: windows-latest
    needs: build
    environment: dev
    steps:
      - name: Get Draft Release ID
        id: get-release
        uses: actions/github-script@v6
        with:
          script: |
            const releaseTitle = 'Draft Release v0.1.0';
            const tagName = 'test_release';

            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const draftRelease = releases.find(release =>
              release.draft && release.name === releaseTitle && release.tag_name === tagName
            );

            if (draftRelease) {
              console.log(`Draft Release ID: ${draftRelease.id}`);
              return draftRelease.id;
            } else {
              console.log('No draft release found with the specified title and tag name.');
              return null;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Asset URL from Draft Release
        id: get-asset-url
        if: steps.get-release.outputs.result != 'null'
        uses: actions/github-script@v6
        with:
          script: |
            const releaseId = '${{ steps.get-release.outputs.result }}';
            const assetName = '3S_PC_automation.exe';

            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
            });

            const asset = release.assets.find(a => a.name === assetName);
            if (asset) {
              console.log(`Asset URL: ${asset.browser_download_url}`);
              return asset.browser_download_url;
            } else {
              console.log('Asset not found.');
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Vercel Environment Variable
        if: steps.get-asset-url.outputs.result != 'null'
        run: |
          $url = "https://api.vercel.com/v9/projects/pcaut/env/uw5nMEmrXbDTeNQB"
          $headers = @{
            "Authorization" = "Bearer $env:VERCEL_CLIENT"
            "Content-Type" = "application/json"
          }
          $body = @{
            "value" = ${{ steps.get-asset-url.outputs.result }}
          } | ConvertTo-Json
          Invoke-RestMethod -Uri $url -Method Patch -Headers $headers -Body $body
        env:
          VERCEL_CLIENT: ${{ secrets.VERCEL_CLIENT }}
